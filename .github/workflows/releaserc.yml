name: release-rc

on:
  push:
    branches:
      - "main"
      - "release-rc/*"

permissions:
  contents: write

jobs:
  release-rc:
    # prepare tag
    name: release-rc
    strategy:
      matrix:
        python-version: ["3.10"]
        poetry-version: ["1.5.1"]
    if: |
      startsWith(github.event.head_commit.message , 'build(release-rc)') &&
      contains(fromJson('["OWNER", "CONTRIBUTOR"]'), github.event.pull_request.author_association)
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: semantic-release
        id: "semantic-release"
        run: |
          npm install -g @commitlint/config-conventional
          npm i conventional-changelog-conventionalcommits
          next_tag=$(npx semantic-release --dry-run --branches ${{ env.CI_COMMIT_BRANCH }} | grep -Po "The next release version is \K\d+.\d+.\d+")
          echo "next_tag=${next_tag}" >> "$GITHUB_OUTPUT"
          echo "Next semantic tag will be ${GITHUB_OUTPUT}"
        env:
          GH_TOKEN: ${{ secrets.GH_CI_TOKEN }}
          GH_URL: ${{ secrets.GH_URL }}
          GH_API_URL: ${{ secrets.GH_URL }}
          GITHUB_API_URL: ${{ secrets.GH_URL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GH_GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.GH_GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GH_GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GH_GIT_COMMITTER_NAME }}
          CI_COMMIT_BRANCH: ${GITHUB_REF#refs/heads/}
      # deploy testpypi
      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: prepare pipx, poetry and dependencies
        run: |
          python -m pip install --user pipx
          python -m pipx ensurepath
          pipx install poetry=="${{ env.poetry_version }}"
          poetry install
          poetry show
        env:
          poetry_version: ${{ matrix.poetry-version }}
      - name: publish testpypi
        run: |
          unique_counter=$(date +%s)
          pipx run poetry version ${{ env.git_ref_name }}-rc${unique_counter}
          pipx run poetry build
          pipx run poetry run twine upload --repository testpypi dist/*
        env:
          git_ref_name: ${{ steps.semantic-release.outputs.next_tag }}
