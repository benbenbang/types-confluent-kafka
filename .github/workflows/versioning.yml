name: pre-release

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "If you are sure to launch a new release, put the value to true."
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      python_version:
        description: "Python version to use (default: 3.12)"
        default: "3.12"
        type: string
      uv_version:
        description: "uv version to use (default: 0.7.19)"
        default: "0.7.19"
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  pre-release:
    if: github.event.inputs.prompt == 'true'
    name: pre-release
    uses: benbenbang/types-confluent-kafka/.github/workflows/semantic-release.yml@workflows
    secrets: inherit
    with:
      python_version: ${{ github.event.inputs.python_version }}
      uv_version: ${{ github.event.inputs.uv_version }}
      dry_run: true

  create-version-pr:
    name: create versioning PR
    runs-on: ubuntu-latest
    needs: pre-release
    if: ${{ needs.pre-release.outputs.new_release != null }}
    steps:
      - name: set python
        uses: actions/setup-python@v5
        with:
          python_version: ${{ github.event.inputs.python_version }}

      - name: install dependencies
        run: |
          python -m pip install --user pipx
          python -m pipx ensurepath
          pipx install uv=="${uv_version}"
          uv sync --all-groups
          pip list
        env:
          uv_version: ${{ github.event.inputs.uv_version }}

      - name: update project version by git tag
        run: |
          # setup git
          git config user.name "ptah-lgtm"
          git config user.email "ptah@bitbrew.dev"

          # clean up artifacts before update pyproject.toml
          git clean -f -x || echo "nothing to remove"
          git rm node_modules || echo "no node modules to remove"

          # make sure up to date
          git pull --rebase origin main

          # update version
          echo "next version is: ${next_tag}"
          pipx run uv version ${next_tag}

          if [[ -n $(git status --porcelain) ]]; then
            # preparing new branch
            branch_name="chore/${next_tag}/$(date '+%Y%m%d_%H%M%S')/pre_release_changes"
            echo "new branch name is: ${branch_name}"
            git checkout -b "${branch_name}"

            # commit and create pr
            git add pyproject.toml
            git commit -m "chore(${next_tag_modified}): update version to $next_tag"
            git remote set-url origin https://${{ secrets.PTAH_USERNAME }}:${{ secrets.PTAH_CI_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git
            git push -f origin "${branch_name}"
            gh pr create --base main --head "${branch_name}" \
              --title "release(versioning): update version to $next_tag" \
              --body "Automated PR to bump the version pre-release." \
              --label "release" \
              --assignee "benbenbang"
          else
            echo "nothing to commit!"
          fi
    env:
      GH_TOKEN: ${{ secrets.PTAH_CI_TOKEN }}
      next_tag: ${{ needs.pre-release.outputs.new_release_tag }}
