name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., 1.2.3)"
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  packages: read

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TECHNICAL_APP_APP_ID }}
          private-key: ${{ secrets.TECHNICAL_APP_PEM }}

      - name: set tag name
        run: |
          export TAG_NAME=${{ github.event.inputs.tag }}
          echo "Using tag: $TAG_NAME"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: semantic release
        run: |
          gh release create --repo ${{ github.repository }} \
                            --title "Types Confluent Kafka ${TAG_NAME}" \
                            --target ${GITHUB_HEAD_REF} \
                            --generate-notes \
                            --latest \
                            $TAG_NAME
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}

  publish:
    name: publish
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/pre-commit:py3.12
      options: -w ${{ github.workspace }}
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
    needs: release
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: show dependencies
        run: |
          pip list
      - name: set tag name
        run: echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
      - name: build with uv
        run: |
          echo "build with release version: ${TAG_NAME}"
          uv version ${TAG_NAME} || echo "toml is already up to date."
          uv build --no-sources
      - name: publish to pypi
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv publish -u ${PYPI_USERNAME} -p $PYPI_TOKEN
      - name: update title  && upload distribution to GitHub Release
        run: |
          gh release upload ${TAG_NAME} dist/*
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
