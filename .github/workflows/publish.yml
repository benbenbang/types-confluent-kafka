name: publish

on:
  workflow_call:
    inpuits:
      python_version:
        description: "Python version to use"
        required: false
        default: "3.13"
        type: string
      uv_version:
        description: "uv version to use"
        required: false
        default: "0.7.19"
        type: string
      new_version_title:
        description: "title of the new version"
        required: true
        type: string

permissions:
  attestations: write
  contents: read
  id-token: write
  packages: write

jobs:
  publish:
    name: publish
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ inputs.python_version }}"

      - name: install dependencies
        run: |
          python -m pip install --user pipx
          python -m pipx ensurepath
          pipx install uv=="${uv_version}"
          uv sync --all-groups
          pip freeze
        env:
          uv_version: "${{ inputs.uv_version }}"

      - name: extract tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: build with uv
        run: |
          echo "build with release version: ${TAG_NAME}"
          uv version ${TAG_NAME} || echo "toml is already up to date."
          uv build --no-sources

      - name: publish to pypi
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv publish -u ${PYPI_USERNAME} -p ${PYPI_TOKEN}

      - name: update title && upload distribution to GitHub Release
        run: |
          gh release edit "${TAG_NAME}" --title "{{ $inputs.new_version_title }}" || echo "Release title already updated."
          gh release upload ${TAG_NAME} dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
