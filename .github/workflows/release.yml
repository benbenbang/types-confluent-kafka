name: release

on:
  push:
    branches:
      - "main"
      - "release/*"

permissions:
  contents: write

jobs:
  verify-condition:
    name: verify-condition
    runs-on: ubuntu-latest
    steps:
      - name: verify author/committer is a rm
        id: fetch-release-manager
        run: |
          echo "IS_RELEASE_MANGER=${{ contains(fromJson(env.release_managers), github.event.head_commit.author.username) || contains(fromJson(env.release_managers), github.event.head_commit.committer.username) }}" >> "$GITHUB_OUTPUT"
        env:
          release_managers: ${{ secrets.RELEASE_MANAGERS }}
      - name: verify execute release
        id: check-condition
        run: |
          echo "will execute release: ${{ startsWith(github.event.head_commit.message , 'build(release-rc)') && steps.fetch-release.manager.outputs.IS_RELEASE_MANGER }}"
          echo "execute_release=${{ startsWith(github.event.head_commit.message , 'build(release-rc)') && steps.fetch-release.manager.outputs.IS_RELEASE_MANGER }}" >> "$GITHUB_OUTPUT"
    outputs:
      execute_release: ${{ steps.check-condition.execute_release }}
  release:
    # prepare tag
    if: ${{ needs.verify-condition.outputs.execute_release }}
    name: release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: get release managers from secrets
        id: fetch-release-manager
        run: |
          is_release_manager=${{ contains(fromJson(env.release_managers), github.event.head_commit.author.username) || contains(fromJson(env.release_managers), github.event.head_commit.committer.username) }}
          echo "IS_RELEASE_MANGER=${is_release_manager}" >> "$GITHUB_OUTPUT"
        env:
          release_managers: ${{ secrets.RELEASE_MANAGERS }}
      - name: verify author/committer is a RM
        if: |
          !(startsWith(github.event.head_commit.message , 'build(release)') && ${{ steps.fetch-release.manager.outputs.IS_RELEASE_MANGER }})
        run: |
          echo "condition is not met"
          exit 0
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: semantic-release
        id: "semantic-release"
        run: |
          npm install -g @commitlint/config-conventional
          npm i conventional-changelog-conventionalcommits
          next_tag=$(npx semantic-release --dry-run --branches ${{ env.CI_COMMIT_BRANCH }} | grep -Po "The next release version is \K\d+.\d+.\d+")
          echo "next_tag=${next_tag}" >> "$GITHUB_OUTPUT"
          echo "Next semantic tag will be ${GITHUB_OUTPUT}"
        env:
          GH_TOKEN: ${{ secrets.GH_CI_TOKEN }}
          GH_URL: ${{ secrets.GH_URL }}
          GH_API_URL: ${{ secrets.GH_URL }}
          GITHUB_API_URL: ${{ secrets.GH_URL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GH_GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.GH_GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GH_GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GH_GIT_COMMITTER_NAME }}
          CI_COMMIT_BRANCH: ${GITHUB_REF#refs/heads/}
      # deploy pypi
      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: prepare pipx, poetry and dependencies
        run: |
          python -m pip install --user pipx
          python -m pipx ensurepath
          pipx install poetry=="${{ env.poetry_version }}"
          poetry install
          poetry show
        env:
          poetry_version: "1.5.1"
      - name: publish pypi
        run: |
          pipx run poetry version ${{ env.git_ref_name }}
          pipx run poetry build
          pipx run poetry run twine upload --repository pypi dist/*
        env:
          git_ref_name: ${{ steps.semantic-release.outputs.next_tag }}
      # publish release note
      - name: publish release note
        run: |
          pipx run poetry version ${{ env.git_ref_name }}
          gh release create ${{ env.git_ref_name }} dist/* -t "Types Confluent Kafka ${{ env.git_ref_name }}" --generate-notes
        env:
          git_ref_name: ${{ steps.semantic-release.outputs.next_tag }}
