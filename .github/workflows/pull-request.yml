name: pull-request-workflows

on:
  pull_request_target:
    branches:
      - main
    types:
      - opened
      - edited
      - reopened
      - synchronize
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/**.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      actions: write
      contents: read
      statuses: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: prepare test environment
        run: |
          pipx install pre-commit
          pre-commit install && pre-commit install --hook commit-msg

          git config --global user.email "pr-title-check@github.com"
          git config --global user.name "pr-title-validator"
      - name: cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: fetch origin
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          # fetch origin default branch
          git fetch --all || echo "unable to fetch all"
          git fetch origin ${{ github.event.repository.default_branch }} || echo "unable to fetch origin"
          git fetch origin --depth 10 ${{ github.event.repository.default_branch }}:${{ github.event.repository.default_branch }} || true
      - name: run pre-commit on pull request (changed files)
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          # run pre-commit on all files or specific files
          if [[ "${RUN_ALL_FILES}" == "true" ]]; then
            pre-commit run --all-files
          else
            pre-commit run --files $(git diff --name-only origin/${{ github.event.repository.default_branch }}..HEAD)
          fi
      - name: run pre-commit on main branch (all files)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          pre-commit run --all-files
      - name: check pr title
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "checking PR title: '${{ github.event.pull_request.title }}'"
          git commit --allow-empty -m "${{ github.event.pull_request.title }}"

  pr-labeler:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/labeler@v5
        continue-on-error: true
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-check-change-files:
    runs-on: ubuntu-latest
    outputs:
      pkg-test: ${{ steps.changed_files.outputs.package_any_changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: tj-actions/changed-files@v46.0.5
        id: changed_files
        with:
          files_yaml: |
            package:
              - confluent_kafka-stubs/*
              - .github/*
              - poetry.lock

  typing-tests:
    name: "run: mypy | pyright"
    needs: pr-check-change-files
    if: ${{ needs.pr-check-change-files.outputs.pkg-test == 'true' }}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        test-type: ["mypy", "pyright"]
        os: ["ubuntu-latest"]
        arch: ["x64", "arm64"] # "arm64" temp switch off, too many trouble with it
    container:
      image: ghcr.io/${{ github.repository }}/pre-commit:py${{ matrix.python-version }}
      options: -w ${{ github.workspace }}
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
    permissions:
      contents: read
      pull-requests: read
      packages: read
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: show dependencies
        run: |
          # poetry install --all-extras --with dev --with lint
          poetry show
      - name: run mypy
        if: matrix.test-type == 'mypy'
        run: |
          poetry run mypy --version
          poetry run mypy confluent_kafka-stubs
      - name: run pyright
        if: matrix.test-type == 'pyright'
        run: |
          poetry run pyright --version # dry run & install
          poetry run pyright confluent_kafka-stubs
